{"version":3,"sources":["Images/SignUp_Image.svg","components/Button.jsx","components/SignUp.jsx","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","value","onClick","className","SignUp","useState","userName","password","email","userData","setUserData","src","SignUp_Image","alt","for","type","placeholder","name","onChange","e","newVal","target","match","prevValue","toLowerCase","classList","remove","add","newEmail","localStorage","setItem","alert","Login","App","signedUp","loggedIn","state","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40e28e83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SignUp_Image.a8046b76.svg\";","import React from \"react\"\r\n\r\nfunction Button({ value, onClick }) {\r\n    return (\r\n        <div className=\"buttondiv\">\r\n            <button className=\"button\" value={value} onClick={onClick}>{value}</button>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Button;","import React,{ useState } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nimport SignUp_Image from \"../Images/SignUp_Image.svg\";\r\n\r\nfunction SignUp() {\r\n    let [userData,setUserData] = useState({\r\n        userName : \"\",\r\n        password: \"\",\r\n        email: \"\"\r\n    });\r\n\r\n    let handleUserNameChange = e => {\r\n        let pattern = /[a-z]{6,}/\r\n        let newVal = e.target.value\r\n        if(newVal.match(pattern)){\r\n            setUserData(prevValue => {\r\n                return {\r\n                    ...prevValue,\r\n                    userName: newVal.toLowerCase()\r\n                }\r\n            })\r\n            e.target.classList.remove(\"error\")\r\n        } else {\r\n            e.target.classList.add(\"error\")\r\n        }\r\n    }\r\n\r\n    let handlePasswordChange = e => {\r\n        let pattern = /[a-z]{6,}/\r\n        let newVal = e.target.value\r\n        if(newVal.match(pattern)){\r\n            setUserData(prevValue => {\r\n                return {\r\n                    ...prevValue,\r\n                    password: newVal\r\n                }\r\n            })\r\n            e.target.classList.remove(\"error\")\r\n        } else {\r\n            e.target.classList.add(\"error\")\r\n        }\r\n    }\r\n\r\n    let handleCheckPassword = e => {\r\n        let newVal = e.target.value\r\n        if(newVal===userData.password){\r\n            e.target.classList.remove(\"error\")\r\n        } else {\r\n            e.target.classList.add(\"error\")\r\n        }\r\n    }\r\n\r\n    let handleClickSignUp = () => {\r\n        if(userData.userName.match(/[a-z]{6,}/) && userData.password.match(/[a-z]{6,}/) && userData.email.match(/@/)){\r\n            localStorage.setItem(\"userName\",userData.userName)\r\n            localStorage.setItem(\"password\",userData.password)\r\n            localStorage.setItem(\"email\",userData.email)\r\n            alert(\"Succes! Account created\")\r\n        }  \r\n    }\r\n\r\n    let handleEmailChange = e => {\r\n        let pattern = /@/\r\n        let newEmail = e.target.value;\r\n        if(newEmail.match(pattern)){\r\n            setUserData(prevValue => {\r\n                return {\r\n                    ...prevValue,\r\n                        email : newEmail.toLowerCase()\r\n                }\r\n            })\r\n            e.target.classList.remove(\"error\")\r\n        } else {\r\n            e.target.classList.add(\"error\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main_signup\">\r\n            <div className=\"signUp\">\r\n                <img src={SignUp_Image} alt=\"SignUp\"/>\r\n                <div className=\"signUp_content\">\r\n                    <h1>Signup</h1>\r\n                    <div className=\"UserName\">\r\n                        <label for=\"userName\"><span className=\"labels\">UserName</span></label><br/>\r\n                        <input type=\"text\" placeholder=\"Type here...\" name=\"username\" onChange={handleUserNameChange}/>\r\n                        <p className=\"disclaimer\">* Username should be min 6 character long alphabets</p>\r\n                    </div>\r\n                    <div className=\"Password\">\r\n                        <label for=\"password\"><span className=\"labels\">Password</span></label><br/>\r\n                        <input type=\"password\" placeholder=\"Type here...\" name=\"password\" onChange={handlePasswordChange}/> \r\n                        <p className=\"disclaimer\">* Password should be min 6 character long alphabets</p>                   \r\n                    </div>\r\n                    <div className=\"Password\">\r\n                        <label for=\"password_again\"><span className=\"labels\">Password Again</span></label><br/>\r\n                        <input type=\"password\" placeholder=\"Type here...\" name=\"password_again\" onChange={handleCheckPassword}/>\r\n                    </div>\r\n                    <div className=\"UserName\">\r\n                        <label for=\"email\"><span className=\"labels\">Email</span></label><br/>\r\n                        <input type=\"email\" placeholder=\"Type here...\" name=\"email\" onChange={handleEmailChange}/>\r\n                        <p className=\"disclaimer\">* A valid email</p>\r\n                    </div>\r\n                    <Button value=\"Sign Up\" onClick={handleClickSignUp}/>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","import React from 'react';\r\n\r\nfunction Login() {\r\n    return (\r\n        <>\r\n            <h1>Login</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React,{ useState } from 'react';\nimport SignUp from \"./components/SignUp\"\nimport Login from \"./components/Login\"\nimport './App.css';\n\nfunction App() {\n  let [state,setState] = useState({\n    signedUp: false,\n    loggedIn: false,\n  })\n  let [userData,setUserData] = useState({\n    userName: \"\",\n    password: \"\"\n  })\n\n  let handleClickSignUp = () => {\n    if(!userData.username===null && userData.password === \"\"){\n      setState(prevValue => {\n        return {\n          ...prevValue,\n          signedUp: true\n        }\n      })\n    }\n  }\n\n  if(!state.signedUp){\n    return(\n      <>\n        <SignUp />\n      </>\n    )\n  } else {\n    return(\n      <>\n        (<h1>Login</h1>\n        <Login />)\n      </>\n    )\n  }\n  \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}